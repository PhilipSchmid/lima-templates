env:
  GOLANG_VERSION: 1.22
  GINKGO_VERSION: v1.16.5
  K8S_MINOR_VERSION: v1.30
  KUBECTL_VERSION: 1.30.1-1.1
  HELM_VERSION: 3.14.2-1
  KIND_VERSION: v0.23.0

images:
- location: "https://cloud-images.ubuntu.com/releases/24.04/release/ubuntu-24.04-server-cloudimg-amd64.img"
  arch: "x86_64"
- location: "https://cloud-images.ubuntu.com/releases/24.04/release/ubuntu-24.04-server-cloudimg-arm64.img"
  arch: "aarch64"

cpus: 6
memory: "10GiB"

networks:
- lima: shared
  macAddress: "de:ad:be:ef:00:02"

mounts:
- location: "~/git"
  writable: true
  sshfs:
    cache: true
- location: "~/.config/fish"
  writable: false
- location: "~/.config/yamllint"
  writable: false
- location: "~/.vim"
  writable: false
# containerd is managed by Docker, not by Lima, so the values are set to false here.
containerd:
  system: false
  user: false
provision:
- mode: system
  # This script defines the host.docker.internal hostname when hostResolver is disabled.
  # It is also needed for lima 0.8.2 and earlier, which does not support hostResolver.hosts.
  # Names defined in /etc/hosts inside the VM are not resolved inside containers when
  # using the hostResolver; use hostResolver.hosts instead (requires lima 0.8.3 or later).
  script: |
    #!/bin/sh
    sed -i 's/host.lima.internal.*/host.lima.internal host.docker.internal/' /etc/hosts
# Install Docker
- mode: system
  script: |
    #!/bin/bash
    set -eux -o pipefail
    command -v docker >/dev/null 2>&1 && exit 0
    export DEBIAN_FRONTEND=noninteractive
    curl -fsSL https://get.docker.com | sh
    # Install binfmt
    apt install qemu binfmt-support qemu-user-static
    # docker run --privileged --rm tonistiigi/binfmt --install all

    # Hack to make ssh port forward able to access docker
    chmod 777 /var/run/docker.sock

    # Hit max FDs sometimes with KIND
    sysctl fs.inotify.max_user_instances=1280
    sysctl fs.inotify.max_user_watches=655360

# Install KIND and K8s Dependencies
- mode: system
  script: |
    apt update
    apt install -y apt-transport-https ca-certificates curl

    # Kubernetes key and repo
    curl -fsSL https://pkgs.k8s.io/core:/stable:/$K8S_MINOR_VERSION/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
    echo "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/$K8S_MINOR_VERSION/deb/ /" | sudo tee /etc/apt/sources.list.d/kubernetes.list
    # helm key and report
    curl https://baltocdn.com/helm/signing.asc | gpg --dearmor | sudo tee /usr/share/keyrings/helm.gpg > /dev/null
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/helm.gpg] https://baltocdn.com/helm/stable/debian/ all main" | sudo tee /etc/apt/sources.list.d/helm-stable-debian.list

    # Install kubectl and helm
    apt update
    apt install -y kubectl=$KUBECTL_VERSION helm=$HELM_VERSION kubecolor kubectx kubetail

    # Install KIND
    curl -Lo ./kind https://kind.sigs.k8s.io/dl/$KIND_VERSION/kind-linux-$(dpkg --print-architecture)
    chmod +x ./kind
    mv ./kind /usr/local/bin/kind

# Install Go Development environment
- mode: system
  script: |
    apt install -y make golang-$GOLANG_VERSION
    # Handle go PATH handling for bash
    echo "export PATH=\$PATH:/usr/lib/go-$GOLANG_VERSION/bin/" > /etc/profile.d/go-path.sh
    chmod +x /etc/profile.d/go-path.sh

# Install Go development dependencies for Cilium
# See https://docs.cilium.io/en/stable/contributing/development/dev_setup/
- mode: system
  script: |
    go install github.com/onsi/ginkgo/ginkgo@$GINKGO_VERSION
    go install github.com/cloudflare/cfssl/cmd/cfssl@latest
    go install github.com/cloudflare/cfssl/cmd/cfssljson@latest
    go install github.com/mfridman/tparse@latest
    go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest

    apt install -y python3-pip

    # Cilium CLI: https://docs.cilium.io/en/stable/gettingstarted/k8s-install-default/#install-the-cilium-cli
    CILIUM_CLI_VERSION=$(curl -s https://raw.githubusercontent.com/cilium/cilium-cli/main/stable.txt)
    CLI_ARCH=amd64
    if [ "$(uname -m)" = "aarch64" ]; then CLI_ARCH=arm64; fi
    curl -L --fail --remote-name-all https://github.com/cilium/cilium-cli/releases/download/${CILIUM_CLI_VERSION}/cilium-linux-${CLI_ARCH}.tar.gz{,.sha256sum}
    sha256sum --check cilium-linux-${CLI_ARCH}.tar.gz.sha256sum
    sudo tar xzvfC cilium-linux-${CLI_ARCH}.tar.gz /usr/local/bin
    rm cilium-linux-${CLI_ARCH}.tar.gz{,.sha256sum}

# Improve Shell Experience
- mode: system
  script: |
    # https://fishshell.com/
    export DEBIAN_FRONTEND=noninteractive
    sudo apt-add-repository -y ppa:fish-shell/release-3
    sudo apt update
    sudo apt install -y fish direnv

- mode: user
  script: |
    # Allow direct user access to docker
    sudo usermod -aG docker $USER

    # Change default shell to fish:
    sudo chsh -s /usr/bin/fish $USER

    # Install oh-my-fish (https://github.com/oh-my-fish/oh-my-fish)
    curl https://raw.githubusercontent.com/oh-my-fish/oh-my-fish/master/bin/install | fish -c 'source - --noninteractive'

    # Install nice theme:
    fish -c 'omf install bobthefish'
    # Install nice fonts:
    sudo apt install -y fonts-hack

    # Link existing fish config:
    rm -f /home/$USER.linux/.config/fish/config.fish
    ln -s /Users/$USER/.config/fish/config.fish /home/$USER.linux/.config/fish/
    # Link existing vim config:
    mkdir /home/$USER.linux/.vim
    ln -s /Users/$USER/.vim/vimrc /home/$USER.linux/.vim/
    mkdir /home/$USER.linux/.config/yamlint
    # Install Vundle (https://github.com/VundleVim/Vundle.vim?tab=readme-ov-file#quick-start):
    git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim
    ln -s /Users/$USER/.config/yamllint/config /home/$USER.linux/.config/yamlint/
    vim +PluginInstall +qall

    # Manually ensure the `/usr/lib/go-$GOLANG_VERSION/bin` is inside your fish PATH!

probes:
- script: |
    #!/bin/bash
    set -eux -o pipefail
    if ! timeout 30s bash -c "until command -v docker >/dev/null 2>&1; do sleep 3; done"; then
      echo >&2 "docker is not installed yet"
      exit 1
    fi
  hint: See "/var/log/cloud-init-output.log". in the guest
- script: |
    #!/bin/bash
    set -eux -o pipefail
    if ! timeout 60s bash -c "until command -v /usr/lib/go-$GOLANG_VERSION/bin/go >/dev/null 2>&1; do sleep 3; done"; then
      echo >&2 "golang is not installed yet"
      exit 1
    fi
  hint: See "/var/log/cloud-init-output.log". in the guest
hostResolver:
  # hostResolver.hosts requires lima 0.8.3 or later. Names defined here will also
  # resolve inside containers, and not just inside the VM itself.
  hosts:
    host.docker.internal: host.lima.internal
portForwards:
- guestSocket: "/var/run/docker.sock"
  hostSocket: "{{.Dir}}/sock/docker.sock"
#ssh:
#  localPort: 55555
message: |
  To run `docker` on the host (assumes docker-cli is installed), run the following commands:
  ------
  docker context create lima --docker "host=unix://{{.Dir}}/sock/docker.sock"
  docker context use lima
  docker run hello-world
  ------
